# Licensed under the MIT License
# https://github.com/craigahobbs/schema-markdown-js/blob/main/LICENSE


#
# The Schema Markdown documentation viewer
#


#
# url - The Schema Markdown text or JSON resource URL
# title - The schema title
#
async function schemaMarkdownDoc(url, title)
    # URL override?
    url = if(vURL != null, vURL, url)
    title = if(title != null && vURL == null, title, url)

    # If no URL was provided, use the Schema Markdown type model schema
    jumpif (url != null) urlNotNull
        types = schemaTypeModel()
        jump urlDone
    urlNotNull:
        # Fetch the Schema Markdown resource
        isJSON = stringEndsWith(url, '.json')
        schemaResource = if(isJSON, fetch(url), fetch(url, null, true))
        jumpif (schemaResource != null) schemaMarkdownTextOK
            markdownPrint('**Error:** Failed to fetch Schema Markdown resource "' + url + '"')
            return
        schemaMarkdownTextOK:

        # Validate or parse the Schema Markdown resource
        types = if(isJSON, schemaValidateTypeModel(schemaResource), schemaParse(schemaResource))
    urlDone:

    # Render the page
    if(vName != null, typePage(types, title, vName), indexPage(types, title))
endfunction


function indexPage(types, title)
    # Set the page title
    setDocumentTitle(title)
    markdownPrint('# ' + title)

    # Group the types
    groups = objectNew()
    typeNames = arraySort(objectKeys(types))
    uncategorizedTypeGroups = objectNew('action', 'Actions', 'enum', 'Enums', 'struct', 'Structs', 'typedef', 'Typedefs')
    ixTypeName = 0
    typeLoop:
        typeName = arrayGet(typeNames, ixTypeName)
        type = objectGet(types, typeName)
        group = objectGet(objectGet(type, arrayGet(objectKeys(type), 0)), 'docGroup')
        group = if(group != null, group, objectGet(uncategorizedTypeGroups, arrayGet(objectKeys(type), 0)))
        if(objectGet(groups, group) == null, objectSet(groups, group, arrayNew()))
        arrayPush(objectGet(groups, group), type)
        ixTypeName = ixTypeName + 1
    jumpif (ixTypeName < arrayLength(typeNames)) typeLoop

    # Render the index groups
    groupNames = arraySort(objectKeys(groups))
    ixGroupName = 0
    groupLoop:
        groupName = arrayGet(groupNames, ixGroupName)
        markdownPrint('', '## ' + groupName)

        # Render the group type links
        groupTypes = objectGet(groups, groupName)
        ixGroupType = 0
        groupTypeLoop:
            groupType = arrayGet(groupTypes, ixGroupType)
            groupTypeName = objectGet(objectGet(groupType, arrayGet(objectKeys(groupType), 0)), 'name')
            groupTypeURL = '#' + if(vURL != null, "var.vURL='" + vURL + "'&", '') + "var.vName='" + groupTypeName + "'"
            markdownPrint('', '[' + groupTypeName + '](' + groupTypeURL + ')')
            ixGroupType = ixGroupType + 1
        jumpif (ixGroupType < arrayLength(groupTypes)) groupTypeLoop
        ixGroupName = ixGroupName + 1
    jumpif (ixGroupName < arrayLength(groupNames)) groupLoop
endfunction


function typePage(types, title, typeName)
    # Set the page title
    setDocumentTitle(title + ' - ' + typeName)
    markdownPrint('[Index](' + if(vURL != null, "#var.vURL='" + vURL + "')", '#var=)'))

    # Type exist?
    jumpif (objectGet(types, typeName) != null) typeOK
        markdownPrint('', '**Error:** Unknown type "' + typeName + '"')
        return
    typeOK:

    # Render the type's documentation
    elementModelRender(schemaElements(types, typeName))
endfunction
