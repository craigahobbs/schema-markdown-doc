# Licensed under the MIT License
# https://github.com/craigahobbs/schema-markdown-js/blob/main/LICENSE


#
# The Schema Markdown documentation viewer
#


#
# url - The Schema Markdown text or JSON resource URL
# title - The schema title
#
async function schemaMarkdownDoc(url, title)
    # URL override?
    url = if(vURL != null, vURL, url)
    title = if(title != null && vURL == null, title, url)

    # If no URL was provided, use the Schema Markdown type model schema
    jumpif (url != null) urlNotNull
        types = schemaTypeModel()
        jump urlDone
    urlNotNull:
        # Fetch the Schema Markdown resource
        isJSON = stringEndsWith(url, '.json')
        schemaResource = if(isJSON, fetch(url), fetch(url, null, true))
        jumpif (schemaResource != null) schemaMarkdownTextOK
            markdownPrint('**Error:** Failed to fetch Schema Markdown resource "' + url + '"')
            return
        schemaMarkdownTextOK:

        # Validate or parse the Schema Markdown resource
        types = if(isJSON, schemaValidateTypeModel(schemaResource), schemaParse(schemaResource))
    urlDone:

    # Render the page
    if(vName != null, typePage(types, title, vName), indexPage(types, title))
endfunction


function indexPage(types, title)
    # Set the page title
    setDocumentTitle(title)
    markdownPrint('# ' + title)

    # Render the index
    sections = arrayNew('Actions', 'Enums', 'Structs', 'Typedefs')
    sectionTypes = arrayNew('action', 'enum', 'struct', 'typedef')
    typeNames = objectKeys(types)
    ixSection = 0
    sectionLoop:
        hasSection = false
        ixTypeName = 0
        typeLoop:
            typeName = arrayGet(typeNames, ixTypeName)
            typeType = arrayGet(objectKeys(objectGet(types, typeName)), 0)
            jumpif (typeType != arrayGet(sectionTypes, ixSection)) skipType
                if(!hasSection, markdownPrint('', '### ' + arrayGet(sections, ixSection)))
                hasSection = true
                typeURL = '#' + if(vURL != null, "var.vURL='" + vURL + "'&", '') + "var.vName='" + typeName + "'"
                markdownPrint('', '[' + typeName + '](' + typeURL + ')')
            skipType:
            ixTypeName = ixTypeName + 1
        jumpif (ixTypeName < arrayLength(typeNames)) typeLoop
        ixSection = ixSection + 1
    jumpif (ixSection < arrayLength(sections)) sectionLoop
endfunction


function typePage(types, title, typeName)
    # Set the page title
    setDocumentTitle(title + ' - ' + typeName)
    markdownPrint('[Index](' + if(vURL != null, "#var.vURL='" + vURL + "')", '#var=)'))

    # Type exist?
    jumpif (objectGet(types, typeName) != null) typeOK
        markdownPrint('', '**Error:** Unknown type "' + typeName + '"')
        return
    typeOK:

    # Render the type's documentation
    schemaPrint(types, typeName)
endfunction
