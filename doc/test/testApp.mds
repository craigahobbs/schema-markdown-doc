# Licensed under the MIT License
# https://github.com/craigahobbs/schema-markdown-doc/blob/main/LICENSE

include '../app.mds'


# Test schema
testSchemaMarkdownDocModel = jsonStringify(objectNew(\
    'TestEnum', objectNew( \
        'enum', objectNew( \
            'name', 'TestEnum', \
            'docGroup', 'Test Group' \
        ) \
    ), \
    'TestStruct', objectNew( \
        'struct', objectNew( \
            'name', 'TestStruct', \
            'docGroup', 'Test Group' \
        ) \
    ), \
    'TestTypedef', objectNew( \
        'typedef', objectNew( \
            'name', 'TestTypedef', \
            'docGroup', 'Test Group', \
            'type', objectNew('builtin', 'string') \
        ) \
    ), \
    'TestAction', objectNew( \
        'action', objectNew( \
            'name', 'TestAction', \
            'docGroup', 'Test Group' \
        ) \
    ), \
    'UncategorizedEnum', objectNew( \
        'enum', objectNew( \
            'name', 'UncategorizedEnum' \
        ) \
    ), \
    'UncategorizedStruct', objectNew( \
        'struct', objectNew( \
            'name', 'UncategorizedStruct' \
        ) \
    ), \
    'UncategorizedTypedef', objectNew( \
        'typedef', objectNew( \
            'name', 'UncategorizedTypedef', \
            'type', objectNew('builtin', 'string') \
        ) \
    ), \
    'UncategorizedAction', objectNew( \
        'action', objectNew( \
            'name', 'UncategorizedAction' \
        ) \
    ) \
))


async function testSchemaMarkdownDoc_index():
    # Setup mocks
    unittestMockAll(objectNew( \
        'systemFetch', objectNew( \
            'model.json', testSchemaMarkdownDocModel \
        ) \
    ))

    # Render the index
    schemaMarkdownDoc('model.json', 'The Test Model')

    # Reset mocks
    unittestDeepEqual(unittestMockEnd(), arrayNew( \
        arrayNew('systemFetch', arrayNew('model.json')), \
        arrayNew('documentSetTitle', arrayNew('The Test Model')), \
        arrayNew('markdownPrint', arrayNew('# The Test Model')), \
        arrayNew('markdownPrint', arrayNew('', '## Actions')), \
        arrayNew('markdownPrint', arrayNew('', "[UncategorizedAction](#var.vName='UncategorizedAction'&_top)")), \
        arrayNew('markdownPrint', arrayNew('', '## Enums')), \
        arrayNew('markdownPrint', arrayNew('', "[UncategorizedEnum](#var.vName='UncategorizedEnum'&_top)")), \
        arrayNew('markdownPrint', arrayNew('', '## Structs')), \
        arrayNew('markdownPrint', arrayNew('', "[UncategorizedStruct](#var.vName='UncategorizedStruct'&_top)")), \
        arrayNew('markdownPrint', arrayNew('', '## Test Group')), \
        arrayNew('markdownPrint', arrayNew('', "[TestAction](#var.vName='TestAction'&_top)")), \
        arrayNew('markdownPrint', arrayNew('', "[TestEnum](#var.vName='TestEnum'&_top)")), \
        arrayNew('markdownPrint', arrayNew('', "[TestStruct](#var.vName='TestStruct'&_top)")), \
        arrayNew('markdownPrint', arrayNew('', "[TestTypedef](#var.vName='TestTypedef'&_top)")), \
        arrayNew('markdownPrint', arrayNew('', '## Typedefs')), \
        arrayNew('markdownPrint', arrayNew('', "[UncategorizedTypedef](#var.vName='UncategorizedTypedef'&_top)")) \
    ))
endfunction
unittestRunTestAsync('testSchemaMarkdownDoc_index')


async function testSchemaMarkdownDoc_index_urlArgument():
    # Setup mocks
    unittestMockAll(objectNew( \
        'systemFetch', objectNew( \
            'other.json', testSchemaMarkdownDocModel \
        ) \
    ))

    # Render the index
    systemGlobalSet('vURL', 'other.json')
    schemaMarkdownDoc('model.json', 'The Test Model')
    systemGlobalSet('vURL', null)

    # Reset mocks
    unittestDeepEqual(unittestMockEnd(), arrayNew( \
        arrayNew('systemFetch', arrayNew('other.json')), \
        arrayNew('documentSetTitle', arrayNew('other.json')), \
        arrayNew('markdownPrint', arrayNew('# other.json')), \
        arrayNew('markdownPrint', arrayNew('', '## Actions')), \
        arrayNew('markdownPrint', arrayNew('', "[UncategorizedAction](#var.vName='UncategorizedAction'&var.vURL='other.json'&_top)")), \
        arrayNew('markdownPrint', arrayNew('', '## Enums')), \
        arrayNew('markdownPrint', arrayNew('', "[UncategorizedEnum](#var.vName='UncategorizedEnum'&var.vURL='other.json'&_top)")), \
        arrayNew('markdownPrint', arrayNew('', '## Structs')), \
        arrayNew('markdownPrint', arrayNew('', "[UncategorizedStruct](#var.vName='UncategorizedStruct'&var.vURL='other.json'&_top)")), \
        arrayNew('markdownPrint', arrayNew('', '## Test Group')), \
        arrayNew('markdownPrint', arrayNew('', "[TestAction](#var.vName='TestAction'&var.vURL='other.json'&_top)")), \
        arrayNew('markdownPrint', arrayNew('', "[TestEnum](#var.vName='TestEnum'&var.vURL='other.json'&_top)")), \
        arrayNew('markdownPrint', arrayNew('', "[TestStruct](#var.vName='TestStruct'&var.vURL='other.json'&_top)")), \
        arrayNew('markdownPrint', arrayNew('', "[TestTypedef](#var.vName='TestTypedef'&var.vURL='other.json'&_top)")), \
        arrayNew('markdownPrint', arrayNew('', '## Typedefs')), \
        arrayNew('markdownPrint', arrayNew('', "[UncategorizedTypedef](#var.vName='UncategorizedTypedef'&var.vURL='other.json'&_top)")) \
    ))
endfunction
unittestRunTestAsync('testSchemaMarkdownDoc_index_urlArgument')


async function testSchemaMarkdownDoc_index_urlNull():
    # Setup mocks
    unittestMockAll()

    # Render the index
    schemaMarkdownDoc()

    # Reset mocks
    unittestDeepEqual(unittestMockEnd(), arrayNew( \
        arrayNew('documentSetTitle', arrayNew('The Schema Markdown Type Model')), \
        arrayNew('markdownPrint', arrayNew('# The Schema Markdown Type Model')), \
        arrayNew('markdownPrint', arrayNew('', '## Enums')), \
        arrayNew('markdownPrint', arrayNew('', "[BuiltinType](#var.vName='BuiltinType'&_top)")), \
        arrayNew('markdownPrint', arrayNew('', '## Structs')), \
        arrayNew('markdownPrint', arrayNew('', "[Action](#var.vName='Action'&_top)")), \
        arrayNew('markdownPrint', arrayNew('', "[ActionURL](#var.vName='ActionURL'&_top)")), \
        arrayNew('markdownPrint', arrayNew('', "[Array](#var.vName='Array'&_top)")), \
        arrayNew('markdownPrint', arrayNew('', "[Attributes](#var.vName='Attributes'&_top)")), \
        arrayNew('markdownPrint', arrayNew('', "[Dict](#var.vName='Dict'&_top)")), \
        arrayNew('markdownPrint', arrayNew('', "[Enum](#var.vName='Enum'&_top)")), \
        arrayNew('markdownPrint', arrayNew('', "[EnumValue](#var.vName='EnumValue'&_top)")), \
        arrayNew('markdownPrint', arrayNew('', "[Struct](#var.vName='Struct'&_top)")), \
        arrayNew('markdownPrint', arrayNew('', "[StructMember](#var.vName='StructMember'&_top)")), \
        arrayNew('markdownPrint', arrayNew('', "[Type](#var.vName='Type'&_top)")), \
        arrayNew('markdownPrint', arrayNew('', "[Typedef](#var.vName='Typedef'&_top)")), \
        arrayNew('markdownPrint', arrayNew('', "[UserBase](#var.vName='UserBase'&_top)")), \
        arrayNew('markdownPrint', arrayNew('', "[UserType](#var.vName='UserType'&_top)")), \
        arrayNew('markdownPrint', arrayNew('', '## Typedefs')), \
        arrayNew('markdownPrint', arrayNew('', "[Types](#var.vName='Types'&_top)")) \
    ))
endfunction
unittestRunTestAsync('testSchemaMarkdownDoc_index_urlNull')


async function testSchemaMarkdownDoc_index_urlNullTitle():
    # Setup mocks
    unittestMockAll()

    # Render the index
    schemaMarkdownDoc(null, 'Ignored')

    # Reset mocks
    unittestDeepEqual(unittestMockEnd(), arrayNew( \
        arrayNew('documentSetTitle', arrayNew('The Schema Markdown Type Model')), \
        arrayNew('markdownPrint', arrayNew('# The Schema Markdown Type Model')), \
        arrayNew('markdownPrint', arrayNew('', '## Enums')), \
        arrayNew('markdownPrint', arrayNew('', "[BuiltinType](#var.vName='BuiltinType'&_top)")), \
        arrayNew('markdownPrint', arrayNew('', '## Structs')), \
        arrayNew('markdownPrint', arrayNew('', "[Action](#var.vName='Action'&_top)")), \
        arrayNew('markdownPrint', arrayNew('', "[ActionURL](#var.vName='ActionURL'&_top)")), \
        arrayNew('markdownPrint', arrayNew('', "[Array](#var.vName='Array'&_top)")), \
        arrayNew('markdownPrint', arrayNew('', "[Attributes](#var.vName='Attributes'&_top)")), \
        arrayNew('markdownPrint', arrayNew('', "[Dict](#var.vName='Dict'&_top)")), \
        arrayNew('markdownPrint', arrayNew('', "[Enum](#var.vName='Enum'&_top)")), \
        arrayNew('markdownPrint', arrayNew('', "[EnumValue](#var.vName='EnumValue'&_top)")), \
        arrayNew('markdownPrint', arrayNew('', "[Struct](#var.vName='Struct'&_top)")), \
        arrayNew('markdownPrint', arrayNew('', "[StructMember](#var.vName='StructMember'&_top)")), \
        arrayNew('markdownPrint', arrayNew('', "[Type](#var.vName='Type'&_top)")), \
        arrayNew('markdownPrint', arrayNew('', "[Typedef](#var.vName='Typedef'&_top)")), \
        arrayNew('markdownPrint', arrayNew('', "[UserBase](#var.vName='UserBase'&_top)")), \
        arrayNew('markdownPrint', arrayNew('', "[UserType](#var.vName='UserType'&_top)")), \
        arrayNew('markdownPrint', arrayNew('', '## Typedefs')), \
        arrayNew('markdownPrint', arrayNew('', "[Types](#var.vName='Types'&_top)")) \
    ))
endfunction
unittestRunTestAsync('testSchemaMarkdownDoc_index_urlNullTitle')


async function testSchemaMarkdownDoc_index_urlError():
    # Setup mocks
    unittestMockAll()

    # Render the index
    schemaMarkdownDoc('model.json', 'The Test Model')

    # Reset mocks
    unittestDeepEqual(unittestMockEnd(), arrayNew( \
        arrayNew('systemFetch', arrayNew('model.json')), \
        arrayNew('markdownPrint', arrayNew('**Error:** Failed to fetch Schema Markdown resource "model.json"')) \
    ))
endfunction
unittestRunTestAsync('testSchemaMarkdownDoc_index_urlError')


async function testSchemaMarkdownDoc_index_urlInvalid():
    # Setup mocks
    unittestMockAll(objectNew( \
        'systemFetch', objectNew( \
            'model.json', objectNew() \
        ) \
    ))

    # Render the index
    schemaMarkdownDoc('model.json', 'The Test Model')

    # Reset mocks
    unittestDeepEqual(unittestMockEnd(), arrayNew( \
        arrayNew('systemFetch', arrayNew('model.json')), \
        arrayNew('markdownPrint', arrayNew('**Error:** Failed to fetch Schema Markdown resource "model.json"')) \
    ))
endfunction
unittestRunTestAsync('testSchemaMarkdownDoc_index_urlInvalid')


async function testSchemaMarkdownDoc_index_urlTextError():
    # Setup mocks
    unittestMockAll()

    # Render the index
    schemaMarkdownDoc('model.smd', 'The Test Model')

    # Reset mocks
    unittestDeepEqual(unittestMockEnd(), arrayNew( \
        arrayNew('systemFetch', arrayNew('model.smd')), \
        arrayNew('markdownPrint', arrayNew('**Error:** Failed to fetch Schema Markdown resource "model.smd"')) \
    ))
endfunction
unittestRunTestAsync('testSchemaMarkdownDoc_index_urlTextError')


async function testSchemaMarkdownDoc_index_urlTextInvalid():
    # Setup mocks
    unittestMockAll(objectNew( \
        'systemFetch', objectNew( \
            'model.smd', 'syntax error' \
        ) \
    ))

    # Render the index
    schemaMarkdownDoc('model.smd', 'The Test Model')

    # Reset mocks
    unittestDeepEqual(unittestMockEnd(), arrayNew( \
        arrayNew('systemFetch', arrayNew('model.smd')), \
        arrayNew('markdownPrint', arrayNew('**Error:** Failed to fetch Schema Markdown resource "model.smd"')) \
    ))
endfunction
unittestRunTestAsync('testSchemaMarkdownDoc_index_urlTextInvalid')


async function testSchemaMarkdownDoc_type():
    # Setup mocks
    unittestMockAll(objectNew( \
        'systemFetch', objectNew( \
            'model.json', testSchemaMarkdownDocModel \
        ) \
    ))

    # Render the index
    systemGlobalSet('vName', 'TestStruct')
    schemaMarkdownDoc('model.json', 'The Test Model')
    systemGlobalSet('vName', null)

    # Reset mocks
    unittestDeepEqual(unittestMockEnd(), arrayNew( \
        arrayNew('systemFetch', arrayNew('model.json')), \
        arrayNew('documentSetTitle', arrayNew('The Test Model - TestStruct')), \
        arrayNew('markdownPrint', arrayNew('[Index](#var=)')), \
        arrayNew('elementModelRender', arrayNew( \
            arrayNew(arrayNew(objectNew('elem', objectNew('text', 'struct TestStruct'), 'html', 'h1'))) \
        )) \
    ))
endfunction
unittestRunTestAsync('testSchemaMarkdownDoc_type')


async function testSchemaMarkdownDoc_type_unknown():
    # Setup mocks
    unittestMockAll(objectNew( \
        'systemFetch', objectNew( \
            'model.json', testSchemaMarkdownDocModel \
        ) \
    ))

    # Render the index
    systemGlobalSet('vName', 'Unknown')
    schemaMarkdownDoc('model.json', 'The Test Model')
    systemGlobalSet('vName', null)

    # Reset mocks
    unittestDeepEqual(unittestMockEnd(), arrayNew( \
        arrayNew('systemFetch', arrayNew('model.json')), \
        arrayNew('documentSetTitle', arrayNew('The Test Model - Unknown')), \
        arrayNew('markdownPrint', arrayNew('[Index](#var=)')), \
        arrayNew('markdownPrint', arrayNew('', '**Error:** Unknown type "Unknown"')) \
    ))
endfunction
unittestRunTestAsync('testSchemaMarkdownDoc_type_unknown')
