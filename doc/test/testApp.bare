# Licensed under the MIT License
# https://github.com/craigahobbs/schema-markdown-doc/blob/main/LICENSE

include <unittest.bare>
include <unittestMock.bare>

include '../app.bare'


# Test schema
testSchemaMarkdownDocModel = jsonStringify({ \
    'TestEnum': { \
        'enum': { \
            'name': 'TestEnum', \
            'docGroup': 'Test Group' \
        } \
    }, \
    'TestStruct': { \
        'struct': { \
            'name': 'TestStruct', \
            'docGroup': 'Test Group' \
        } \
    }, \
    'TestTypedef': { \
        'typedef': { \
            'name': 'TestTypedef', \
            'docGroup': 'Test Group', \
            'type': {'builtin': 'string'} \
        } \
    }, \
    'TestAction': { \
        'action': { \
            'name': 'TestAction', \
            'docGroup': 'Test Group' \
        } \
    }, \
    'UncategorizedEnum': { \
        'enum': { \
            'name': 'UncategorizedEnum' \
        } \
    }, \
    'UncategorizedStruct': { \
        'struct': { \
            'name': 'UncategorizedStruct' \
        } \
    }, \
    'UncategorizedTypedef': { \
        'typedef': { \
            'name': 'UncategorizedTypedef', \
            'type': {'builtin': 'string'} \
        } \
    }, \
    'UncategorizedAction': { \
        'action': { \
            'name': 'UncategorizedAction' \
        } \
    } \
})


async function testSchemaMarkdownDoc_index():
    # Setup mocks
    unittestMockAll({ \
        'systemFetch': { \
            'model.json': testSchemaMarkdownDocModel \
        } \
    })

    # Render the index
    schemaMarkdownDoc('model.json', 'The Test Model')

    # Reset mocks
    unittestDeepEqual(unittestMockEnd(), [ \
        ['systemFetch', ['model.json']], \
        ['documentSetTitle', ['The Test Model']], \
        ['markdownPrint', ['# The Test Model']], \
        ['markdownPrint', ['', '## Actions']], \
        ['markdownPrint', ['', "[UncategorizedAction](#var.vName='UncategorizedAction'&_top)"]], \
        ['markdownPrint', ['', '## Enums']], \
        ['markdownPrint', ['', "[UncategorizedEnum](#var.vName='UncategorizedEnum'&_top)"]], \
        ['markdownPrint', ['', '## Structs']], \
        ['markdownPrint', ['', "[UncategorizedStruct](#var.vName='UncategorizedStruct'&_top)"]], \
        ['markdownPrint', ['', '## Test Group']], \
        ['markdownPrint', ['', "[TestAction](#var.vName='TestAction'&_top)"]], \
        ['markdownPrint', ['', "[TestEnum](#var.vName='TestEnum'&_top)"]], \
        ['markdownPrint', ['', "[TestStruct](#var.vName='TestStruct'&_top)"]], \
        ['markdownPrint', ['', "[TestTypedef](#var.vName='TestTypedef'&_top)"]], \
        ['markdownPrint', ['', '## Typedefs']], \
        ['markdownPrint', ['', "[UncategorizedTypedef](#var.vName='UncategorizedTypedef'&_top)"]] \
    ])
endfunction
unittestRunTest('testSchemaMarkdownDoc_index')


async function testSchemaMarkdownDoc_index_hideNoGroup():
    # Setup mocks
    unittestMockAll({ \
        'systemFetch': { \
            'model.json': testSchemaMarkdownDocModel \
        } \
    })

    # Render the index
    schemaMarkdownDoc('model.json', 'The Test Model', true)

    # Reset mocks
    unittestDeepEqual(unittestMockEnd(), [ \
        ['systemFetch', ['model.json']], \
        ['documentSetTitle', ['The Test Model']], \
        ['markdownPrint', ['# The Test Model']], \
        ['markdownPrint', ['', '## Test Group']], \
        ['markdownPrint', ['', "[TestAction](#var.vName='TestAction'&_top)"]], \
        ['markdownPrint', ['', "[TestEnum](#var.vName='TestEnum'&_top)"]], \
        ['markdownPrint', ['', "[TestStruct](#var.vName='TestStruct'&_top)"]], \
        ['markdownPrint', ['', "[TestTypedef](#var.vName='TestTypedef'&_top)"]] \
    ])
endfunction
unittestRunTest('testSchemaMarkdownDoc_index_hideNoGroup')


async function testSchemaMarkdownDoc_index_urlArgument():
    # Setup mocks
    unittestMockAll({ \
        'systemFetch': { \
            'other.json': testSchemaMarkdownDocModel \
        } \
    })

    # Render the index
    systemGlobalSet('vURL', 'other.json')
    schemaMarkdownDoc('model.json', 'The Test Model')
    systemGlobalSet('vURL', null)

    # Reset mocks
    unittestDeepEqual(unittestMockEnd(), [ \
        ['systemFetch', ['other.json']], \
        ['documentSetTitle', ['other.json']], \
        ['markdownPrint', ['# other.json']], \
        ['markdownPrint', ['', '## Actions']], \
        ['markdownPrint', ['', "[UncategorizedAction](#var.vName='UncategorizedAction'&var.vURL='other.json'&_top)"]], \
        ['markdownPrint', ['', '## Enums']], \
        ['markdownPrint', ['', "[UncategorizedEnum](#var.vName='UncategorizedEnum'&var.vURL='other.json'&_top)"]], \
        ['markdownPrint', ['', '## Structs']], \
        ['markdownPrint', ['', "[UncategorizedStruct](#var.vName='UncategorizedStruct'&var.vURL='other.json'&_top)"]], \
        ['markdownPrint', ['', '## Test Group']], \
        ['markdownPrint', ['', "[TestAction](#var.vName='TestAction'&var.vURL='other.json'&_top)"]], \
        ['markdownPrint', ['', "[TestEnum](#var.vName='TestEnum'&var.vURL='other.json'&_top)"]], \
        ['markdownPrint', ['', "[TestStruct](#var.vName='TestStruct'&var.vURL='other.json'&_top)"]], \
        ['markdownPrint', ['', "[TestTypedef](#var.vName='TestTypedef'&var.vURL='other.json'&_top)"]], \
        ['markdownPrint', ['', '## Typedefs']], \
        ['markdownPrint', ['', "[UncategorizedTypedef](#var.vName='UncategorizedTypedef'&var.vURL='other.json'&_top)"]] \
    ])
endfunction
unittestRunTest('testSchemaMarkdownDoc_index_urlArgument')


async function testSchemaMarkdownDoc_index_urlNull():
    # Setup mocks
    unittestMockAll()

    # Render the index
    schemaMarkdownDoc()

    # Reset mocks
    unittestDeepEqual(unittestMockEnd(), [ \
        ['documentSetTitle', ['The Schema Markdown Type Model']], \
        ['markdownPrint', ['# The Schema Markdown Type Model']], \
        ['markdownPrint', ['', '## Enums']], \
        ['markdownPrint', ['', "[BuiltinType](#var.vName='BuiltinType'&_top)"]], \
        ['markdownPrint', ['', '## Structs']], \
        ['markdownPrint', ['', "[Action](#var.vName='Action'&_top)"]], \
        ['markdownPrint', ['', "[ActionURL](#var.vName='ActionURL'&_top)"]], \
        ['markdownPrint', ['', "[Array](#var.vName='Array'&_top)"]], \
        ['markdownPrint', ['', "[Attributes](#var.vName='Attributes'&_top)"]], \
        ['markdownPrint', ['', "[Dict](#var.vName='Dict'&_top)"]], \
        ['markdownPrint', ['', "[Enum](#var.vName='Enum'&_top)"]], \
        ['markdownPrint', ['', "[EnumValue](#var.vName='EnumValue'&_top)"]], \
        ['markdownPrint', ['', "[Struct](#var.vName='Struct'&_top)"]], \
        ['markdownPrint', ['', "[StructMember](#var.vName='StructMember'&_top)"]], \
        ['markdownPrint', ['', "[Type](#var.vName='Type'&_top)"]], \
        ['markdownPrint', ['', "[Typedef](#var.vName='Typedef'&_top)"]], \
        ['markdownPrint', ['', "[UserBase](#var.vName='UserBase'&_top)"]], \
        ['markdownPrint', ['', "[UserType](#var.vName='UserType'&_top)"]], \
        ['markdownPrint', ['', '## Typedefs']], \
        ['markdownPrint', ['', "[Types](#var.vName='Types'&_top)"]] \
    ])
endfunction
unittestRunTest('testSchemaMarkdownDoc_index_urlNull')


async function testSchemaMarkdownDoc_index_urlNullTitle():
    # Setup mocks
    unittestMockAll()

    # Render the index
    schemaMarkdownDoc(null, 'Ignored')

    # Reset mocks
    unittestDeepEqual(unittestMockEnd(), [ \
        ['documentSetTitle', ['The Schema Markdown Type Model']], \
        ['markdownPrint', ['# The Schema Markdown Type Model']], \
        ['markdownPrint', ['', '## Enums']], \
        ['markdownPrint', ['', "[BuiltinType](#var.vName='BuiltinType'&_top)"]], \
        ['markdownPrint', ['', '## Structs']], \
        ['markdownPrint', ['', "[Action](#var.vName='Action'&_top)"]], \
        ['markdownPrint', ['', "[ActionURL](#var.vName='ActionURL'&_top)"]], \
        ['markdownPrint', ['', "[Array](#var.vName='Array'&_top)"]], \
        ['markdownPrint', ['', "[Attributes](#var.vName='Attributes'&_top)"]], \
        ['markdownPrint', ['', "[Dict](#var.vName='Dict'&_top)"]], \
        ['markdownPrint', ['', "[Enum](#var.vName='Enum'&_top)"]], \
        ['markdownPrint', ['', "[EnumValue](#var.vName='EnumValue'&_top)"]], \
        ['markdownPrint', ['', "[Struct](#var.vName='Struct'&_top)"]], \
        ['markdownPrint', ['', "[StructMember](#var.vName='StructMember'&_top)"]], \
        ['markdownPrint', ['', "[Type](#var.vName='Type'&_top)"]], \
        ['markdownPrint', ['', "[Typedef](#var.vName='Typedef'&_top)"]], \
        ['markdownPrint', ['', "[UserBase](#var.vName='UserBase'&_top)"]], \
        ['markdownPrint', ['', "[UserType](#var.vName='UserType'&_top)"]], \
        ['markdownPrint', ['', '## Typedefs']], \
        ['markdownPrint', ['', "[Types](#var.vName='Types'&_top)"]] \
    ])
endfunction
unittestRunTest('testSchemaMarkdownDoc_index_urlNullTitle')


async function testSchemaMarkdownDoc_index_urlError():
    # Setup mocks
    unittestMockAll()

    # Render the index
    schemaMarkdownDoc('model.json', 'The Test Model')

    # Reset mocks
    unittestDeepEqual(unittestMockEnd(), [ \
        ['systemFetch', ['model.json']], \
        ['markdownPrint', ['**Error:** Failed to fetch Schema Markdown resource "model.json"']] \
    ])
endfunction
unittestRunTest('testSchemaMarkdownDoc_index_urlError')


async function testSchemaMarkdownDoc_index_urlInvalid():
    systemLogDebug('NOTICE: The following "jsonParse" error is expected:')

    # Setup mocks
    unittestMockAll({ \
        'systemFetch': { \
            'model.json': {} \
        } \
    })

    # Render the index
    schemaMarkdownDoc('model.json', 'The Test Model')

    # Reset mocks
    unittestDeepEqual(unittestMockEnd(), [ \
        ['systemFetch', ['model.json']], \
        ['markdownPrint', ['**Error:** Failed to fetch Schema Markdown resource "model.json"']] \
    ])
endfunction
unittestRunTest('testSchemaMarkdownDoc_index_urlInvalid')


async function testSchemaMarkdownDoc_index_urlTextError():
    # Setup mocks
    unittestMockAll()

    # Render the index
    schemaMarkdownDoc('model.smd', 'The Test Model')

    # Reset mocks
    unittestDeepEqual(unittestMockEnd(), [ \
        ['systemFetch', ['model.smd']], \
        ['markdownPrint', ['**Error:** Failed to fetch Schema Markdown resource "model.smd"']] \
    ])
endfunction
unittestRunTest('testSchemaMarkdownDoc_index_urlTextError')


async function testSchemaMarkdownDoc_index_urlTextInvalid():
    systemLogDebug('NOTICE: The following "schemaParse" error is expected:')

    # Setup mocks
    unittestMockAll({ \
        'systemFetch': { \
            'model.smd': 'syntax error' \
        } \
    })

    # Render the index
    schemaMarkdownDoc('model.smd', 'The Test Model')

    # Reset mocks
    unittestDeepEqual(unittestMockEnd(), [ \
        ['systemFetch', ['model.smd']], \
        ['markdownPrint', ['**Error:** Failed to fetch Schema Markdown resource "model.smd"']] \
    ])
endfunction
unittestRunTest('testSchemaMarkdownDoc_index_urlTextInvalid')


async function testSchemaMarkdownDoc_type():
    # Setup mocks
    unittestMockAll({ \
        'systemFetch': { \
            'model.json': testSchemaMarkdownDocModel \
        } \
    })

    # Render the index
    systemGlobalSet('vName', 'TestStruct')
    schemaMarkdownDoc('model.json', 'The Test Model')
    systemGlobalSet('vName', null)

    # Reset mocks
    unittestDeepEqual(unittestMockEnd(), [ \
        ['systemFetch', ['model.json']], \
        ['documentSetTitle', ['The Test Model - TestStruct']], \
        ['markdownPrint', ['[Index](#var=)']], \
        ['elementModelRender', [ \
            [[{'elem': {'text': 'struct TestStruct'}, 'html': 'h1'}]] \
        ]] \
    ])
endfunction
unittestRunTest('testSchemaMarkdownDoc_type')


async function testSchemaMarkdownDoc_type_unknown():
    # Setup mocks
    unittestMockAll({ \
        'systemFetch': { \
            'model.json': testSchemaMarkdownDocModel \
        } \
    })

    # Render the index
    systemGlobalSet('vName', 'Unknown')
    schemaMarkdownDoc('model.json', 'The Test Model')
    systemGlobalSet('vName', null)

    # Reset mocks
    unittestDeepEqual(unittestMockEnd(), [ \
        ['systemFetch', ['model.json']], \
        ['documentSetTitle', ['The Test Model - Unknown']], \
        ['markdownPrint', ['[Index](#var=)']], \
        ['markdownPrint', ['', '**Error:** Unknown type "Unknown"']] \
    ])
endfunction
unittestRunTest('testSchemaMarkdownDoc_type_unknown')
