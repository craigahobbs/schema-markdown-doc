# Licensed under the MIT License
# https://github.com/craigahobbs/schema-markdown-doc/blob/main/LICENSE

include <args.bare>


#
# The Schema Markdown documentation viewer main entry point
#
# url - The Schema Markdown text or JSON resource URL. If null, the Schema Markdown type model is displayed.
# title - The schema title
# hideNoGroup - If true, hide types with no group
#
async function schemaMarkdownDoc(url, title, hideNoGroup):
    # Parse arguments
    args = argsParse(schemaMarkdownDocArguments)
    name = objectGet(args, 'name')
    url = objectGet(args, 'url', url)
    title = if(title != null && !objectHas(args, 'url'), title, url)

    # If no URL was provided, use the Schema Markdown type model schema
    if url == null:
        types = schemaTypeModel()
        title = 'The Schema Markdown Type Model'
    else:
        # Fetch the Schema Markdown resource
        types = null
        schemaText = systemFetch(url)
        if schemaText != null:
            if stringEndsWith(url, '.json'):
                schemaJSON = jsonParse(schemaText)
                if schemaJSON != null:
                    types = schemaValidateTypeModel(schemaJSON)
                endif
            else:
                types = schemaParse(schemaText)
            endif
        endif

        # Error?
        if types == null:
            markdownPrint('**Error:** Failed to fetch Schema Markdown resource "' + url + '"')
            return
        endif
    endif

    # Render the page
    if name != null:
        schemaMarkdownDocTypePage(types, title, name)
    else:
        schemaMarkdownDocIndexPage(types, title, hideNoGroup)
    endif
endfunction


# The Schema Markdown documentation viewer arguments
schemaMarkdownDocArguments = argsValidate([ \
    {'name': 'url', 'global': 'vURL'}, \
    {'name': 'name'} \
])


# Render the Schema Markdown documentation viewer index page
function schemaMarkdownDocIndexPage(types, title, hideNoGroup):
    # Set the page title
    documentSetTitle(title)
    markdownPrint('# ' + markdownEscape(title))

    # Group the types
    groups = {}
    typeNames = arraySort(objectKeys(types))
    typeGroups = {'action': 'Actions', 'enum': 'Enums', 'struct': 'Structs', 'typedef': 'Typedefs'}
    for typeName in typeNames:
        type = objectGet(types, typeName)
        group = objectGet(objectGet(type, arrayGet(objectKeys(type), 0)), 'docGroup')

        # No group? Use the type's default group.
        if group == null:
            if hideNoGroup:
                continue
            endif
            group = objectGet(typeGroups, arrayGet(objectKeys(type), 0))
        endif

        # Add the type to the group
        if !objectHas(groups, group):
            objectSet(groups, group, [])
        endif
        arrayPush(objectGet(groups, group), type)
    endfor

    # Render the index groups
    groupNames = arraySort(objectKeys(groups))
    for groupName in groupNames:
        markdownPrint('', '## ' + markdownEscape(groupName))

        # Render the group type links
        groupTypes = objectGet(groups, groupName)
        for groupType in groupTypes:
            groupTypeName = objectGet(objectGet(groupType, arrayGet(objectKeys(groupType), 0)), 'name')
            markdownPrint('', argsLink(schemaMarkdownDocArguments, groupTypeName, {'name': groupTypeName}, false, '_top'))
        endfor
    endfor
endfunction


# Render the Schema Markdown documentation viewer type page
function schemaMarkdownDocTypePage(types, title, typeName):
    # Set the page title
    documentSetTitle(title + ' - ' + typeName)
    markdownPrint(argsLink(schemaMarkdownDocArguments, 'Index', {'name': null}))

    # Type exist?
    if !objectHas(types, typeName):
        markdownPrint('', '**Error:** Unknown type "' + typeName + '"')
        return
    endif

    # Render the type's documentation
    elementModelRender(schemaElements(types, typeName))
endfunction
